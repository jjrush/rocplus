module ROC_PLUS;

# Copyright 2025 Battelle Energy Alliance, LLC

################################################################################
##
## ICSNPP - ROC Plus
##
## This file defines the ROC Plus Zeek parser as defined in the
## October 2022 revision of the ROC Plus Protocol Specifications Manual.
## The manual that was targeted for this parser has been provided as part of this repository.
##
## Jason Rush, Idaho National Lab, April 2025
## jason.rush@inl.gov
##
################################################################################

import spicy;
import ROC_PLUS_ENUMS;
import ROC_PLUS_GLOBALS;
import ROC_PLUS_FUNCTIONS;

import ROC_PLUS_OPCODE_006;
import ROC_PLUS_OPCODE_007;
import ROC_PLUS_OPCODE_008;
import ROC_PLUS_OPCODE_010;
import ROC_PLUS_OPCODE_011;
import ROC_PLUS_OPCODE_017;
import ROC_PLUS_OPCODE_024;
import ROC_PLUS_OPCODE_050;
import ROC_PLUS_OPCODE_100;
import ROC_PLUS_OPCODE_105;
import ROC_PLUS_OPCODE_108;
import ROC_PLUS_OPCODE_118;
import ROC_PLUS_OPCODE_119;
import ROC_PLUS_OPCODE_135;
import ROC_PLUS_OPCODE_136;
import ROC_PLUS_OPCODE_137;
import ROC_PLUS_OPCODE_138;
import ROC_PLUS_OPCODE_139;
import ROC_PLUS_OPCODE_166;
import ROC_PLUS_OPCODE_167;
import ROC_PLUS_OPCODE_180;
import ROC_PLUS_OPCODE_181;
import ROC_PLUS_OPCODE_203;
import ROC_PLUS_OPCODE_205;
import ROC_PLUS_OPCODE_206;
import ROC_PLUS_OPCODE_224;
import ROC_PLUS_OPCODE_225;
import ROC_PLUS_OPCODE_255;

public type UDP_Messages = unit {
    rocMessage : ROC_Message[];
};

public type TCP_Messages = unit {
    rocMessageTCP : ROC_Message_TCP[];

    # on %error(msg: string) {
    #     print "ERROR in TCP_Messages: %s" % msg;
    # }
};

public type ROC_Message_TCP = unit {
    rocMessage : ROC_Message;

    # on %error(msg: string) {
    #     print "ERROR in ROC_Message_TCP: %s" % msg;
    # }
};

public type ROC_Message = unit {
    var rocPlusLinkId : string;

    destinationUnit   : uint8; 
    destinationGroup  : uint8;
    sourceUnit        : uint8;
    sourceGroup       : uint8;
    opcode            : uint8 &convert=ROC_PLUS_ENUMS::Opcode($$);
    # on opcode {
    #     print "Got opcode: %s" % self.opcode;
    # }
    dataLength        : uint8;

    dataBytes         : DataBytes(self);

    lsbCRC            : uint8; # least significant byte
    msbCRC            : uint8; # most signfiicant byte

    # on %done {
    #     print "Got destinationUnit: ", self.destinationUnit;
    #     print "Got destinationGroup: ", self.destinationGroup;
    #     print "Got sourceUnit: ", self.sourceUnit;
    #     print "Got sourceGroup: ", self.sourceGroup;
    #     print "Got dataLength: ", self.dataLength;
    #     print "Got dataBytes: ", self.dataBytes;
    #     print "Got lsbCRC: ", self.lsbCRC;
    #     print "Got msbCRC: ", self.msbCRC;
    # }

    on %init {
        self.rocPlusLinkId = ROC_PLUS_FUNCTIONS::generateId();
        # print "Got rocPlusLinkId: ", self.rocPlusLinkId;
    }
};

public type DataBytes = unit(rocMessage: ROC_Message) {
    # var opcode     : ROC_PLUS_ENUMS::Opcode;
    var dataLength : uint8;
    var packetType : ROC_PLUS_ENUMS::PacketType = ROC_PLUS_GLOBALS::PACKET_TYPE_GLOBAL;

    switch(rocMessage.opcode) {
        ROC_PLUS_ENUMS::Opcode::SYSTEM_CONFIG                            -> systemConfiguration                  : ROC_PLUS_OPCODE_006::SystemConfiguration();
        ROC_PLUS_ENUMS::Opcode::READ_REALTIME_CLOCK                      -> readRealtimeClock                    : ROC_PLUS_OPCODE_007::ReadRealtimeClock();
        ROC_PLUS_ENUMS::Opcode::SET_REALTIME_CLOCK                       -> setRealtimeClock                     : ROC_PLUS_OPCODE_008::SetRealtimeClock();
        ROC_PLUS_ENUMS::Opcode::READ_CONFIGURABLE_OPCODE_POINT_DATA      -> readConfigurableOpcodePointData      : ROC_PLUS_OPCODE_010::ReadConfigurableOpcodePointData(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::WRITE_CONFIGURABLE_OPCODE_POINT_DATA     -> writeConfigurableOpcodePointData     : ROC_PLUS_OPCODE_011::WriteConfigurableOpcodePointData(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::LOGIN_REQUEST                            -> login                                : ROC_PLUS_OPCODE_017::Login(self.dataLength);  
        ROC_PLUS_ENUMS::Opcode::STORE_AND_FORWARD                        -> storeAndForward                      : ROC_PLUS_OPCODE_024::StoreAndForward(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::REQUEST_IO_POINT_POSITION                -> ioPointPosition                      : ROC_PLUS_OPCODE_050::IOPointPosition(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::ACCESS_USER_DEFINED_INFORMATION          -> accessUserDefinedInfo                : ROC_PLUS_OPCODE_100::AccessUserDefinedInformation();
        ROC_PLUS_ENUMS::Opcode::REQUEST_TODAY_YESTERDAY_MIN_MAX_VALUES   -> requestTodayYesterdayMinMaxVals      : ROC_PLUS_OPCODE_105::RequestTodayYesterdayMinMaxValues();
        ROC_PLUS_ENUMS::Opcode::REQUEST_HISTORY_TAG_AND_PERIODIC_INDEX   -> requestHistoryTagAndPeriodicIndex    : ROC_PLUS_OPCODE_108::RequestHistoryTagAndPeriodicIndex(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::REQUEST_ALARM_DATA                       -> requestAlarmData                     : ROC_PLUS_OPCODE_118::RequestAlarmData();
        ROC_PLUS_ENUMS::Opcode::REQUEST_EVENT_DATA                       -> requestEventData                     : ROC_PLUS_OPCODE_119::RequestEventData();
        ROC_PLUS_ENUMS::Opcode::REQUEST_SINGLE_HISTORY_POINT_DATA        -> singleHistoryPointData               : ROC_PLUS_OPCODE_135::SingleHistoryPointData();
        ROC_PLUS_ENUMS::Opcode::REQUEST_MULTIPLE_HISTORY_POINT_DATA      -> multipleHistoryPointData             : ROC_PLUS_OPCODE_136::MultipleHistoryPointData();
        ROC_PLUS_ENUMS::Opcode::REQUEST_HISTORY_INDEX                    -> requestHistoryIndex                  : ROC_PLUS_OPCODE_137::RequestHistoryIndex();
        ROC_PLUS_ENUMS::Opcode::REQUEST_DAILY_AND_PERIODIC_HISTORY       -> requestDailyAndPeriodicHistory       : ROC_PLUS_OPCODE_138::RequestDailyAndPeriodicHistory();
        ROC_PLUS_ENUMS::Opcode::HISTORY_INFORMATION_DATA                 -> historyInformationData               : ROC_PLUS_OPCODE_139::HistoryInformationData(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::SET_SINGLE_POINT_PARAMETERS              -> setSinglePointParameters             : ROC_PLUS_OPCODE_166::SetSinglePointParameters(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::REQUEST_SINGLE_POINT_PARAMETERS          -> requestSinglePointParameters         : ROC_PLUS_OPCODE_167::RequestSinglePointParameters(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::REQUEST_PARAMETERS                       -> requestParameters                    : ROC_PLUS_OPCODE_180::RequestParameters(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::WRITE_PARAMETERS                         -> writeParameters                      : ROC_PLUS_OPCODE_181::WriteParameters(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::GENERAL_FILE_TRANSFER                    -> generalFileTransfer                  : ROC_PLUS_OPCODE_203::GeneralFileTransfer(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::PEER_TO_PEER_NETWORK_MESSAGES            -> peerToPeerNetworkMessages            : ROC_PLUS_OPCODE_205::PeerToPeerNetworkMessages(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::READ_TRANSACTION_HISTORY_DATA            -> readTransactionHistory               : ROC_PLUS_OPCODE_206::ReadTransactionHistory(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::SRBX_SIGNAL                              -> srbxSignal                           : ROC_PLUS_OPCODE_224::SRBXSignal(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::ACKNOWLEDGE_SRBX                         -> ackSRBX                              : ROC_PLUS_OPCODE_225::AcknowledgeSRBX(self.dataLength);
        ROC_PLUS_ENUMS::Opcode::ERROR_INDICATOR                          -> errorIndicator                       : ROC_PLUS_OPCODE_255::ErrorIndicator(self.dataLength);
    };

    on %init {
        self.dataLength = rocMessage.dataLength;

        # Special case for opcodes 139, 203, and 206 
        # Need next byte in stream to determine packet type so handle that in those opcodes
        # Otherwise determine packet type here
        if(rocMessage.opcode != ROC_PLUS_ENUMS::Opcode::GENERAL_FILE_TRANSFER && 
           rocMessage.opcode != ROC_PLUS_ENUMS::Opcode::READ_TRANSACTION_HISTORY_DATA &&
           rocMessage.opcode != ROC_PLUS_ENUMS::Opcode::HISTORY_INFORMATION_DATA) {
            ROC_PLUS_GLOBALS::PACKET_TYPE_GLOBAL = ROC_PLUS_FUNCTIONS::determinePacketType(rocMessage.opcode, rocMessage.dataLength);
        }
    }

    on %done {
        self.packetType = ROC_PLUS_GLOBALS::PACKET_TYPE_GLOBAL;
    }

    # on %error(msg: string) {
    #     print "ERROR in DataBytes: " % msg;
    # }
};
